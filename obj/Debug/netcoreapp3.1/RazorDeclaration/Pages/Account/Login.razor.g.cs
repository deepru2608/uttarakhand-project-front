#pragma checksum "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\Pages\Account\Login.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "95c68570d120dfb1ae6e25207f1b46bd22f738ef"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace uttarakhand_project_front.Pages.Account
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Auth;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Lists;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.PdfViewerServer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(AccountLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/Login")]
    public partial class Login : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 168 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\Pages\Account\Login.razor"
       
    SfToast ToastObjLogin;
    public LoginViewModel LoginModel { get; set; }
    public string Loader { get; set; }
    public bool IsEnable { get; set; } = false;
    public string ForgotEmail { get; set; }
    public string UserOtp { get; set; }
    public bool IsOtpEnabled { get; set; }
    public string OtpLoader { get; set; }
    public string MobileNo { get; set; }

    protected override void OnInitialized()
    {
        LoginModel = new LoginViewModel();
        Loader = "none";
        OtpLoader = "none";
    }

    protected async Task LoginUser()
    {
        Loader = "inline";
        IsEnable = true;
        StateHasChanged();
        var user = await UserManager.FindByEmailAsync(LoginModel.Email);
        if (user != null)
        {
            var userToken = await UserService.LoginUserAsync(LoginModel);
            if (userToken.Status.ToLower() == "success")
            {
                await LoginService.Login(userToken.Token);
                Loader = "none";
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                await ToastObjLogin.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = userToken.Status,
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
                Loader = "none";
                IsEnable = false;
                await Task.Delay(TimeSpan.FromSeconds(2000));
                NavigationManager.NavigateTo("Login", true);
            }
        }
        else
        {
            await ToastObjLogin.Show(new ToastModel
            {
                Title = "Error!",
                Content = "You are not registered with us, please sign up and verify your mobile number!",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });
            Loader = "none";
            IsEnable = false;
            await Task.Delay(TimeSpan.FromSeconds(2000));
            NavigationManager.NavigateTo("Login", true);
        }
    }

    async Task VerifyUser()
    {
        OtpLoader = "inline";
        if (!string.IsNullOrEmpty(ForgotEmail))
        {
            var user = await dapperService.CustomFindByEmailAsync(ForgotEmail);
            if (user != null)
            {
                var phoneNumber = user.PhoneNumber;
                if (!string.IsNullOrEmpty(phoneNumber))
                {
                    MobileNo = phoneNumber;
                    var allOtpData = await dapperService.GetOtpDetailsAsync();
                    var otpData = allOtpData.FirstOrDefault(f => f.Email.ToLower() == ForgotEmail.ToLower() && f.IsValid == false);
                    string otp = string.Empty;
                    if (otpData != null)
                    {
                        otp = otpData.Otp;
                    }
                    else
                    {
                        otp = CenterService.GenerateOtp();
                    }
                    if (!string.IsNullOrEmpty(otp))
                    {
                        string message = $"Your one time password is {otp}";
                        var result = await CenterService.SendSmsAsync(phoneNumber, message, ForgotEmail, otp, "sent");
                        if (result == "success")
                        {
                            await Js.ShowModel("modalOtp");
                            OtpLoader = "none";
                            await ToastObjLogin.Show(new ToastModel
                            {
                                Title = "Success!",
                                Content = "Otp has been sent on your mobile number.",
                                CssClass = "e-toast-success",
                                Icon = "e-success toast-icons"
                            });
                        }
                        else
                        {
                            await ToastObjLogin.Show(new ToastModel
                            {
                                Title = "Error!",
                                Content = "There is some problem in otp service, please try again after sometimes!",
                                CssClass = "e-toast-danger",
                                Icon = "e-error toast-icons"
                            });

                            await Task.Delay(2000);
                            OtpLoader = "none";
                        }
                    }
                    else
                    {
                        await ToastObjLogin.Show(new ToastModel
                        {
                            Title = "Error!",
                            Content = "Otp does not generate this time, Please try again!",
                            CssClass = "e-toast-danger",
                            Icon = "e-error toast-icons"
                        });

                        await Task.Delay(2000);
                        OtpLoader = "none";
                    }
                }
            }
            else
            {
                await ToastObjLogin.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "You are not registered with us, please sign up and verify your mobile number!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
            }
        }
        else
        {
            await ToastObjLogin.Show(new ToastModel
            {
                Title = "Error!",
                Content = "Please enter your registered email address!",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });
        }
    }

    async Task CheckOtpAsync()
    {
        var allOtpData = await dapperService.GetOtpDetailsAsync();
        var otpData = allOtpData.FirstOrDefault(f => f.Email.ToLower() == ForgotEmail.ToLower() && f.IsValid == false);
        if (otpData != null)
        {
            if (otpData.Otp == UserOtp)
            {
                var otpUpdateResult = await dapperService.UpdateOtpDetailsAsync(otpData.UniqueId);
                if (otpUpdateResult == "success")
                {
                    var user = await dapperService.CustomFindByEmailAsync(ForgotEmail);
                    if (user != null)
                    {
                        string NewPassword = user.FirstName.Substring(0, 1).ToUpper() + user.FirstName.Substring(1) + "@1234";
                        var token = await UserManager.GeneratePasswordResetTokenAsync(user);
                        if (!string.IsNullOrEmpty(token))
                        {
                            await Task.Delay(2000);
                            var resetResult = await UserManager.ResetPasswordAsync(user, token, NewPassword);
                            if (resetResult.Succeeded)
                            {
                                string Message = $"Your new password is {NewPassword}";
                                var result = await CenterService.SendSmsAsync(MobileNo, Message);
                            }
                        }
                        await ToastObjLogin.Show(new ToastModel
                        {
                            Title = "Success!",
                            Content = "Your new password has been sent on your registered mobile number!",
                            CssClass = "e-toast-success",
                            Icon = "e-success toast-icons"
                        });
                        await Task.Delay(3000);
                        NavigationManager.NavigateTo("Login", true);
                    }
                }
                else
                {
                    await ToastObjLogin.Show(new ToastModel
                    {
                        Title = "Error!",
                        Content = otpUpdateResult,
                        CssClass = "e-toast-danger",
                        Icon = "e-error toast-icons"
                    });
                }
            }
            else
            {
                await ToastObjLogin.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "Otp doesn't match, please enter the correct otp or click resend button to receive otp again!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
            }
        }
        else
        {
            await ToastObjLogin.Show(new ToastModel
            {
                Title = "Error!",
                Content = "Otp is not update right now, please reload the page and try again!!",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });
        }
    }

    async Task ResentOtpAsync()
    {
        var allOtpData = await dapperService.GetOtpDetailsAsync();
        var otpData = allOtpData.FirstOrDefault(f => f.Email.ToLower() == ForgotEmail.ToLower() && f.IsValid == false);
        if (otpData != null)
        {
            string message = $"Your one time password is {otpData.Otp}";
            var result = await CenterService.SendSmsAsync(MobileNo, message, ForgotEmail, otpData.Otp, "resend");
            if (result == "success")
            {
                await Js.ShowModel("modalOtp");
                IsEnable = false;
                OtpLoader = "none";
                await ToastObjLogin.Show(new ToastModel
                {
                    Title = "Success!",
                    Content = "Otp has been resent on your mobile number.",
                    CssClass = "e-toast-success",
                    Icon = "e-success toast-icons"
                });
            }
            else
            {
                await ToastObjLogin.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "There is some problem in otp service, please try again after sometimes!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });

                await Task.Delay(2000);
                OtpLoader = "none";
                IsEnable = false;
            }
        }
        else
        {
            var otp = CenterService.GenerateOtp();
            if (!string.IsNullOrEmpty(otp))
            {
                string message = $"Your one time password is {otp}";
                var result = await CenterService.SendSmsAsync(MobileNo, message, ForgotEmail, otpData.Otp, "send");
                if (result == "success")
                {
                    await Js.ShowModel("modalOtp");
                    OtpLoader = "none";
                    await ToastObjLogin.Show(new ToastModel
                    {
                        Title = "Success!",
                        Content = "Otp has been resent on your mobile number.",
                        CssClass = "e-toast-success",
                        Icon = "e-success toast-icons"
                    });
                }
                else
                {
                    await ToastObjLogin.Show(new ToastModel
                    {
                        Title = "Error!",
                        Content = "There is some problem in otp service, please try again after sometimes!",
                        CssClass = "e-toast-danger",
                        Icon = "e-error toast-icons"
                    });

                    await Task.Delay(2000);
                    OtpLoader = "none";
                }
            }
            else
            {
                await ToastObjLogin.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "Otp does not generate this time, Please try again!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });

                await Task.Delay(2000);
                OtpLoader = "none";
            }
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILoginService LoginService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPaymentService paymentService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DapperService dapperService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CaptchaService captchaService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment hostingEnvironment { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient httpClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedSessionStorage ProtectedSessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime Js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SignInManager<ApplicationUser> SignInManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> UserManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICenterService CenterService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserService UserService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
