#pragma checksum "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\Pages\Admin\EditApplicationAdmin.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "975721291703b2c8791be334851ee381b7c0bf04"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace uttarakhand_project_front.Pages.Admin
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Auth;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using uttarakhand_project_front.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Charts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Lists;

#line default
#line hidden
#nullable disable
#nullable restore
#line 35 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using Syncfusion.Blazor.PdfViewerServer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 39 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\Pages\Admin\EditApplicationAdmin.razor"
           [Authorize(Roles = "Admin")]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/EditRegistration/{ShowOptions}")]
    public partial class EditApplicationAdmin : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 469 "D:\Deepanshu Projects\KuEntranceProject\uttarakhand-project-front\Pages\Admin\EditApplicationAdmin.razor"
 
    SfToast ToastObjRegistration;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string ShowOptions { get; set; }

    List<string> liFilesList = new List<string>();
    public bool M_EdKuCondition { get; set; } = false;
    public bool IsM_Ed { get; set; } = false;
    public string HeadingText { get; set; }
    public RegistrationViewModel model { get; set; }
    public string Loader { get; set; }
    public string UpdateLoader { get; set; }
    public string NewLoader { get; set; }
    public List<string> ExamCenterList { get; set; }
    public List<string> GroupList { get; set; }
    public List<string> MaritalStatusList { get; set; }
    public List<string> NationalityList { get; set; }
    public List<string> DomicileUksList { get; set; }
    public List<string> CategoryList { get; set; }
    public List<string> FreedomFightersList { get; set; }
    public List<string> DefencePersonalList { get; set; }
    public List<string> PhysicallyChallengesList { get; set; }
    public List<string> PhysicallyChallengesTypeList { get; set; }
    public List<string> GendersList { get; set; }
    public List<string> PunishedByCourtList { get; set; }
    public List<string> DabarredCollegeList { get; set; }
    public List<string> StateList { get; set; }
    public List<string> StreamList { get; set; }
    public List<string> CoursesList { get; set; }
    public List<string> PassingYearList { get; set; }
    public List<string> EWS { get; set; } // Economicallly Weaker Section (EWS)
    public List<string> M_EdGraducationTheory { get; set; }
    public List<string> M_EdGraducationPractical { get; set; }
    public bool GraducationReadonly { get; set; } = false;
    public bool PostGraducationReadonly { get; set; } = false;
    public bool IsPhysically { get; set; } = false;
    public bool IsFormSubmit { get; set; } = false;
    public bool isChecked { get; set; }
    public List<string> KUOptions { get; set; }
    public bool ShowKUOptions { get; set; } = false;
    public bool M_EdExamMarksRealonly { get; set; } = false;
    public bool M_EdQualifyingDetailsShowHide { get; set; } = true;
    public bool IsEwsHideShow { get; set; } = true;
    public bool IsStateEnabled { get; set; } = false;
    public bool HidePostGraduation { get; set; } = true;
    public string TempPhotoPath { get; set; }
    public string TempSIgnaturePath { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = new RegistrationViewModel();
        Loader = "none";
        NewLoader = "none";
        UpdateLoader = "none";
        KUOptions = new List<string>();
        DomicileUksList = new List<string>();
        FreedomFightersList = new List<string>();
        DefencePersonalList = new List<string>();
        PhysicallyChallengesList = new List<string>();
        PunishedByCourtList = new List<string>();
        DabarredCollegeList = new List<string>();
        ExamCenterList = new List<string>();
        GroupList = new List<string>();
        MaritalStatusList = new List<string>();
        NationalityList = new List<string>();
        CategoryList = new List<string>();
        PhysicallyChallengesTypeList = new List<string>();
        GendersList = new List<string>();
        StreamList = new List<string>();
        CoursesList = new List<string>();
        PassingYearList = new List<string>();
        StateList = new List<string>();
        EWS = new List<string>();
        M_EdGraducationTheory = new List<string>();
        await LoadDropDownData();


        var authState = await authenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        var userRelatedForm = await CenterService.GetRegistrationDetailsByRefIdAsync(ShowOptions);
        if (userRelatedForm.UserId != null)
        {
            IsFormSubmit = true;
            model = userRelatedForm;
            model.Year = DateTime.Now.Year.ToString();
            if (userRelatedForm.CourseName == "B.Ed")
            {
                IsM_Ed = false;
                HeadingText = "B.Ed";
                model.CourseName = "Bachelor of Education";
                model.IsKumaunUniversity = userRelatedForm.IsKumaunUniversity;
                if (model.IsKumaunUniversity == "Yes")
                {
                    PassingYearList = GetPassingYears("Yes");
                }
                else if (model.IsKumaunUniversity == "No")
                {
                    PassingYearList = GetPassingYears("No");
                }

                if (model.IsPhysicallyChallenged == "No")
                {
                    IsPhysically = true;
                    PhysicallyChallengesTypeList = PHTypeListOnlyNone();
                    model.PhysicallyChallengedType = "None";
                }
                else
                {
                    IsPhysically = false;
                    PhysicallyChallengesTypeList = PHTypeListWithOutNone();
                }

                if (model.IsDomicileOfUttarakhand == "Yes")
                {
                    CategoryList = CastCategoryWithoutUG();
                    model.Category = userRelatedForm.Category;
                    IsStateEnabled = true;
                }
                else
                {
                    CategoryList = CastCategoryWithUG();
                    model.Category = "Unreserved General";
                    IsStateEnabled = false;
                }

                if (model.Category != "Unreserved General")
                {
                    IsEwsHideShow = false;
                    model.Category = "Schedule Cast (SC)";
                }
                else
                {
                    IsEwsHideShow = true;
                    model.Category = "Unreserved General";
                }

                if (model.GradutionPassingYear == "Appearing")
                {
                    HidePostGraduation = false;
                }
            }
            else
            {
                model.CourseName = "Master of Education";
                IsM_Ed = true;
                HeadingText = "M.Ed";
                if (userRelatedForm.IsAppearing)
                {
                    model.IsAppearing = userRelatedForm.IsAppearing;
                    isChecked = userRelatedForm.IsAppearing;
                    ShowKUOptions = true;
                    model.IsKumaunUniversity = userRelatedForm.IsKumaunUniversity;
                }

                if (model.IsPhysicallyChallenged == "No")
                {
                    IsPhysically = true;
                    PhysicallyChallengesTypeList = PHTypeListOnlyNone();
                    model.PhysicallyChallengedType = "None";
                }
                else
                {
                    IsPhysically = false;
                    PhysicallyChallengesTypeList = PHTypeListWithOutNone();
                }

                if (model.IsDomicileOfUttarakhand == "Yes")
                {
                    CategoryList = CastCategoryWithUG();
                    model.Category = "Unreserved General";
                    IsStateEnabled = true;
                }
                else
                {
                    CategoryList = CastCategoryWithoutUG();
                    model.Category = "Schedule Cast (SC)";
                    IsStateEnabled = false;
                }

                if (model.Category != "Unreserved General")
                {
                    IsEwsHideShow = false;
                    model.Category = "Schedule Cast (SC)";
                }
                else
                {
                    IsEwsHideShow = true;
                    model.Category = "Unreserved General";
                }
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await ProtectedSessionStorage.SetAsync("gradu", true);
        await ProtectedSessionStorage.SetAsync("IsValidInKuTerms", true);
        await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
        await ProtectedSessionStorage.SetAsync("criminal_debarred", true);
    }

    async Task LoadDropDownData()
    {
        List<string> liYeaNo = new List<string>();
        liYeaNo.Add("Yes");
        liYeaNo.Add("No");

        DomicileUksList = liYeaNo;
        FreedomFightersList = liYeaNo;
        DefencePersonalList = liYeaNo;
        PhysicallyChallengesList = liYeaNo;
        PunishedByCourtList = liYeaNo;
        DabarredCollegeList = liYeaNo;
        EWS = liYeaNo;
        KUOptions = liYeaNo;

        GroupList.Add("Arts");
        GroupList.Add("Commerce");
        GroupList.Add("Science");

        MaritalStatusList.Add("Single");
        MaritalStatusList.Add("Married");

        NationalityList.Add("Indian");
        NationalityList.Add("Others");

        CategoryList.Add("Unreserved General");
        CategoryList.Add("Schedule Cast (SC)");
        CategoryList.Add("Schedule Tribe (ST)");
        CategoryList.Add("Other Backward Class (OBC) - Creamy");
        CategoryList.Add("Other Backward Class (OBC) - Non Creamy");

        PhysicallyChallengesTypeList.Add("Physically Challenged");
        PhysicallyChallengesTypeList.Add("Visually Challenged");
        PhysicallyChallengesTypeList.Add("None");

        GendersList.Add("Male");
        GendersList.Add("Female");
        GendersList.Add("Transgender");

        StreamList.Add("Arts");
        StreamList.Add("Commerce");
        StreamList.Add("Science");

        CoursesList.Add("Bachelor of Education");
        CoursesList.Add("Master of Education");

        PassingYearList = GetPassingYears("No");

        var examCenterData = await dapperService.GetExamCenterList();
        ExamCenterList = examCenterData.Select(s => s.CenterName).ToList();

        var qualifyingExamDetails = await dapperService.GetAllQualifyingExamDetails();
        M_EdGraducationTheory = qualifyingExamDetails.Where(w => w.CourseName == "M_Ed_Theory").Select(s => s.Name).ToList();
        M_EdGraducationPractical = qualifyingExamDetails.Where(w => w.CourseName == "M_Ed_Practical").Select(s => s.Name).ToList();

        var stateData = await dapperService.GetAllStatesListAsync();
        StateList = stateData.Select(s => s.StateName).ToList();
    }

    List<string> CastCategoryWithoutUG()
    {
        List<string> li = new List<string>();
        li.Add("Unreserved General");
        li.Add("Schedule Cast (SC)");
        li.Add("Schedule Tribe (ST)");
        li.Add("Other Backward Class (OBC) - Creamy");
        li.Add("Other Backward Class (OBC) - Non Creamy");
        return li;
    }

    List<string> CastCategoryWithUG()
    {
        List<string> li = new List<string>();
        li.Add("Unreserved General");
        return li;
    }

    List<string> PHTypeListWithOutNone()
    {
        List<string> li = new List<string>();
        li.Add("Physically Challenged");
        li.Add("Visually Challenged");
        return li;
    }

    List<string> PHTypeListOnlyNone()
    {
        List<string> li = new List<string>();
        li.Add("None");
        return li;
    }

    void PassingYearGraduChangeEvent(string value)
    {
        if (value.ToUpper() == "Appearing".ToUpper())
        {
            GraducationReadonly = true;
            model.GradutionMaxMarks = "0";
            model.GradutionObtMarks = "0";
            model.GradutionPercentageMarks = "0";
            HidePostGraduation = false;
        }
        else
        {
            GraducationReadonly = false;
            model.GradutionMaxMarks = "";
            model.GradutionObtMarks = "";
            model.GradutionPercentageMarks = "";
            HidePostGraduation = true;
        }
    }

    void PassingYearPostGraduChangeEvent(string value)
    {
        if (value.ToUpper() == "Appearing".ToUpper())
        {
            PostGraducationReadonly = true;
            model.PGradutionMaxMarks = "0";
            model.PGradutionObtMarks = "0";
            model.PGradutionPercentageMarks = "0";
        }
        else
        {
            PostGraducationReadonly = false;
            model.PGradutionMaxMarks = "";
            model.PGradutionObtMarks = "";
            model.PGradutionPercentageMarks = "";
        }
    }

    async Task BindState()
    {
        var stateData = await dapperService.GetAllStatesListAsync();
        StateList = stateData.Select(s => s.StateName).ToList();
    }

    async Task GraduationPercentageCalc()
    {
        if (model.GradutionObtMarks != "")
        {
            if (model.GradutionMaxMarks != "")
            {
                if (model.GradutionObtMarks != "0" && model.GradutionMaxMarks != "0")
                {
                    if (int.Parse(model.GradutionObtMarks) < int.Parse(model.GradutionMaxMarks))
                    {
                        await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
                        double percentage = Convert.ToDouble((Convert.ToInt32(model.GradutionObtMarks) * 100) / Convert.ToInt32(model.GradutionMaxMarks));
                        model.GradutionPercentageMarks = percentage.ToString();
                        if (model.Category.ToLower() == "Unreserved General".ToLower())
                        {
                            if (percentage > 50)
                            {
                                await ProtectedSessionStorage.SetAsync("gradu", true);
                            }
                            else
                            {
    //await ToastObjRegistration.Show(new ToastModel
    //{
    //    Title = "Error!",
    //    Content = "You are not eligible!",
    //    CssClass = "e-toast-danger",
    //    Icon = "e-error toast-icons"
    //});
    //await ProtectedSessionStorage.SetAsync("gradu", false); // because i am checking on submit event
                            }
                        }
                        else
                        {
                            if (percentage > 45)
                            {
                                await ProtectedSessionStorage.SetAsync("gradu", true);
                            }
                            else
                            {
    //await ToastObjRegistration.Show(new ToastModel
    //{
    //    Title = "Error!",
    //    Content = "You are not eligible!",
    //    CssClass = "e-toast-danger",
    //    Icon = "e-error toast-icons"
    //});
    //await ProtectedSessionStorage.SetAsync("gradu", false); // because i am checking on submit event
                            }
                        }
                    }
                    else
                    {
                        await ToastObjRegistration.Show(new ToastModel
                        {
                            Title = "Error!",
                            Content = "Obtained marks should be less than maximum marks in graduation options!",
                            CssClass = "e-toast-danger",
                            Icon = "e-error toast-icons"
                        });
                        await ProtectedSessionStorage.SetAsync("MarksInvalid", false);
                    }
                }
                else
                {
                    await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
                }
            }
            else
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "Please fill graduation maximum marks!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
            }
        }
        else
        {
            await ToastObjRegistration.Show(new ToastModel
            {
                Title = "Error!",
                Content = "Please fill graduation obtained marks!",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });
        }
    }

    async Task PostGraduationPercentageCalc()
    {
        if (model.PGradutionObtMarks != "")
        {
            if (model.PGradutionMaxMarks != "")
            {
                if (model.GradutionObtMarks != "0" && model.GradutionMaxMarks != "0")
                {
                    if (int.Parse(model.PGradutionObtMarks) < int.Parse(model.PGradutionMaxMarks))
                    {
                        await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
                        double percentage = Convert.ToDouble((Convert.ToInt32(model.PGradutionObtMarks) * 100) / Convert.ToInt32(model.PGradutionMaxMarks));
                        model.PGradutionPercentageMarks = percentage.ToString();
                    }
                    else
                    {
                        await ToastObjRegistration.Show(new ToastModel
                        {
                            Title = "Error!",
                            Content = "Obtained marks should be less than maximum marks in post graduation options!",
                            CssClass = "e-toast-danger",
                            Icon = "e-error toast-icons"
                        });
                        await ProtectedSessionStorage.SetAsync("MarksInvalid", false);
                    }
                }
                else
                {
                    await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
                }
            }
            else
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "Please fill post graduation maximum marks!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
            }
        }
        else
        {
            await ToastObjRegistration.Show(new ToastModel
            {
                Title = "Error!",
                Content = "Please fill post graduation maximum marks!",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });
        }
    }

    async Task UploadPhotoAsync(UploadChangeEventArgs args)
    {
        if (args.Files.Any())
        {
            try
            {
                var file = args.Files.FirstOrDefault();
                if (file != null)
                {
                    if (file.FileInfo.Size < 1000 || file.FileInfo.Size > 200000)
                    {
                        await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = "Please upload file in betwen 1 kB to 200 KB!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
                    }
                    else
                    {
                        var checkifFileHas = await ProtectedSessionStorage.GetAsync<string>("UniquePhotoName");
                        if (string.IsNullOrEmpty(checkifFileHas))
                        {
                            string uniqueFileName = Guid.NewGuid().ToString() + "_" + file.FileInfo.Name;
                            await ProtectedSessionStorage.SetAsync("UniquePhotoName", uniqueFileName);
                            model.PhohoFile = file;
                            model.PhotoPath = uniqueFileName;
                            TempPhotoPath = uniqueFileName;
                            CenterService.UploadImagesInTemp(file, uniqueFileName);
                        }
                        else
                        {
                            await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = "Photo has already uploaded!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
                        }
                    }
                }
                else
                {
                    await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = "Please upload the file!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
                }
            }
            catch (Exception ex)
            {
                await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
            }
        }
    }

    async Task UploadSignatureAsync(UploadChangeEventArgs args)
    {
        if (args.Files.Any())
        {
            try
            {
                var file = args.Files.FirstOrDefault();
                if (file != null)
                {
                    if (file.FileInfo.Size < 1000 || file.FileInfo.Size > 200000)
                    {
                        await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = "Please upload file in betwen 1 kB to 200 KB!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
                    }
                    else
                    {
                        var checkifFileHas = await ProtectedSessionStorage.GetAsync<string>("UniqueSignatureName");
                        if (string.IsNullOrEmpty(checkifFileHas))
                        {
                            string uniqueFileName = Guid.NewGuid().ToString() + "_" + file.FileInfo.Name;
                            await ProtectedSessionStorage.SetAsync("UniqueSignatureName", uniqueFileName);
                            model.SignatureFile = file;
                            model.SignaturePath = uniqueFileName;
                            TempSIgnaturePath = uniqueFileName;
                            CenterService.UploadImagesInTemp(file, uniqueFileName);
                        }
                        else
                        {
                            await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = "Signature file has already uploaded!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
                        }
                    }
                }
                else
                {
                    await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = "Please upload the file!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
                }
            }
            catch (Exception ex)
            {
                await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
            }
        }
    }

    async Task<bool> MarksEligibilityCheckAgainAsync()
    {
        bool IsEligible = true;
        try
        {
            if (HeadingText == "B.Ed")
            {
                if (model.GradutionPassingYear != "Appearing")
                {
                    if (!string.IsNullOrEmpty(model.GradutionPercentageMarks))
                    {
                        if (model.Category.ToLower() == "Unreserved General".ToLower())
                        {
                            if (int.Parse(model.GradutionPercentageMarks) >= 50)
                            {
                                IsEligible = true;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(model.PGradutionPercentageMarks))
                                {
                                    if (int.Parse(model.PGradutionPercentageMarks) >= 50)
                                    {
                                        IsEligible = true;
                                    }
                                    else
                                    {
                                        IsEligible = false;
                                        await ToastObjRegistration.Show(new ToastModel
                                        {
                                            Title = "Error!",
                                            Content = "You are not eligible, because your graduation or post graduation marks percentage is less than 50%!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                                        });
                                    }
                                }
                                else
                                {
                                    IsEligible = false;
                                    await ToastObjRegistration.Show(new ToastModel
                                    {
                                        Title = "Error!",
                                        Content = "You are not eligible, because your graduation marks percentage is less than 50%!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                                    });
                                }
                            }
                        }
                        else
                        {
                            if (int.Parse(model.GradutionPercentageMarks) >= 45)
                            {
                                IsEligible = true;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(model.PGradutionPercentageMarks))
                                {
                                    if (int.Parse(model.PGradutionPercentageMarks) >= 45)
                                    {
                                        IsEligible = true;
                                    }
                                    else
                                    {
                                        IsEligible = false;
                                        await ToastObjRegistration.Show(new ToastModel
                                        {
                                            Title = "Error!",
                                            Content = "You are not eligible, because your graduation or post graduation marks percentage is less than 45%!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                                        });
                                    }
                                }
                                else
                                {
                                    IsEligible = false;
                                    await ToastObjRegistration.Show(new ToastModel
                                    {
                                        Title = "Error!",
                                        Content = "You are not eligible, because your graduation marks percentage is less than 45%!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                                    });
                                }
                            }
                        }
                    }
                }
                else
                {
                    IsEligible = true;
                }
            }
            else
            {
                IsEligible = true;
            }
        }
        catch (Exception ex)
        {
            if (HeadingText == "B.Ed")
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                });
                NavigationManager.NavigateTo("RegistrationForm/B_Ed", true);
            }
            else
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                });
                NavigationManager.NavigateTo("RegistrationForm/M_Ed", true);
            }
        }

        return IsEligible;
    }

    public async Task<string> FileUploadMethodAsync(IFormFile Photo, string PhotoPath)
    {
        string uniqueFileName = null;
        if (Photo != null)
        {
            string folderPath = Path.Combine(hostingEnvironment.WebRootPath, PhotoPath);
            uniqueFileName = Guid.NewGuid().ToString() + "_" + Photo.FileName;
            string filePath = Path.Combine(folderPath, uniqueFileName);
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await Photo.CopyToAsync(fileStream);
            }
        }

        return uniqueFileName;
    }

    void IsPysicallyChallenge(string value)
    {
        if (value == "No")
        {
            IsPhysically = true;
            PhysicallyChallengesTypeList = PHTypeListOnlyNone();
            model.PhysicallyChallengedType = "None";
        }
        else
        {
            IsPhysically = false;
            PhysicallyChallengesTypeList = PHTypeListWithOutNone();
        }
    }

    async Task CheckCrimicalRecord(string value)
    {
        if (value == "Yes")
        {
            await ToastObjRegistration.Show(new ToastModel
            {
                Title = "Error!",
                Content = "You are not eligible due to some litigation and punished by court!",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });
            await ProtectedSessionStorage.SetAsync("criminal_debarred", false);
        }
        else
            await ProtectedSessionStorage.SetAsync("criminal_debarred", true);
    }

    async Task M_EdMarksChangeEvent()
    {
        if (model.TheoryExamMaxMarks != "0" && model.TheoryExamObtMarks != "0")
        {
            if (!string.IsNullOrEmpty(model.TheoryExamMaxMarks) && !string.IsNullOrEmpty(model.TheoryExamObtMarks))
            {
                if (!string.IsNullOrEmpty(model.PracticalExamMaxMarks) && !string.IsNullOrEmpty(model.PracticalExamObtMarks))
                {
                    var totalMaxMarks = Convert.ToDouble(model.TheoryExamMaxMarks) + Convert.ToDouble(model.PracticalExamMaxMarks);
                    var totalObtMarks = Convert.ToDouble(model.TheoryExamObtMarks) + Convert.ToDouble(model.PracticalExamObtMarks);
                    double percentage = Convert.ToDouble((totalObtMarks * 100) / totalMaxMarks);
                    model.M_EdTotalPercentage = Math.Round(percentage, 2).ToString();
                }
                else
                {
                    await ToastObjRegistration.Show(new ToastModel
                    {
                        Title = "Error!",
                        Content = "Please fill practical exam marks!",
                        CssClass = "e-toast-danger",
                        Icon = "e-error toast-icons"
                    });
                }
            }
            else
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "Please fill theory exam marks!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
            }
        }
    }

    async Task M_EdIsAppearing(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        var IsAppearing = Convert.ToBoolean(args.Value);
        if (IsAppearing)
        {
            ShowKUOptions = true;
            model.IsAppearing = true;
        }
        else
        {
            ShowKUOptions = false;
            model.IsAppearing = false;
            model.IsKumaunUniversity = string.Empty;
            M_EdExamMarksRealonly = false;
            M_EdQualifyingDetailsShowHide = true;
            PassingYearList = GetPassingYears("No");
            await ProtectedSessionStorage.SetAsync("IsValidInKuTerms", true);
        }
    }

    List<string> GetPassingYears(string options)
    {
        List<string> li = new List<string>();
        if (options == "Yes")
        {
            li.Add("Appearing");
        }

        for (int i = DateTime.Now.Year; i >= 2010; i--)
        {
            li.Add(i.ToString());
        }
        return li;
    }

    async Task CheckUserIsValidInKuTerms(string value)
    {
        if (HeadingText == "B.Ed")
        {
            if (value == "Yes")
            {
                PassingYearList = GetPassingYears("Yes");
                model.GradutionUniversity = "Kumaun University";
            }
            else
            {
                PassingYearList = GetPassingYears("No");
                model.GradutionUniversity = "";
            }
            await ProtectedSessionStorage.SetAsync("IsValidInKuTerms", true);
        }
        else
        {
            if (value == "Yes")
            {
                model.TheoryExamMaxMarks = "0";
                model.TheoryExamObtMarks = "0";
                model.PracticalExamMaxMarks = "0";
                model.PracticalExamObtMarks = "0";
                model.M_EdTotalPercentage = "0";
                model.M_EdExamUniversity = "Kumaun University";
                M_EdExamMarksRealonly = true;
                M_EdQualifyingDetailsShowHide = true;
                PassingYearList = GetPassingYears("Yes");
                await ProtectedSessionStorage.SetAsync("IsValidInKuTerms", true);
            }
            else
            {
                M_EdExamMarksRealonly = false;
                M_EdQualifyingDetailsShowHide = false;
                model.M_EdExamUniversity = "";
                await ProtectedSessionStorage.SetAsync("IsValidInKuTerms", false);
                await ToastObjRegistration.Show(new ToastModel {Title = "Error!", Content = "You are not eligible!", CssClass = "e-toast-danger", Icon = "e-error toast-icons"});
            }
        }
    }

    async Task<bool> B_EdValidateForm()
    {
        bool value = true;
        if (string.IsNullOrEmpty(model.GradutionName) || string.IsNullOrEmpty(model.GradutionStream)
            || string.IsNullOrEmpty(model.GradutionUniversity) || string.IsNullOrEmpty(model.GradutionPassingYear)
            || string.IsNullOrEmpty(model.GradutionMaxMarks) || string.IsNullOrEmpty(model.GradutionObtMarks)
            || string.IsNullOrEmpty(model.GradutionPercentageMarks))
        {
            await ToastObjRegistration.Show(new ToastModel
            {
                Title = "Error!",
                Content = "Please fill the graduation details in qualifying exam section or if you have already filled all the details please check again qualifying exam section!",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });
            value = false;
        }
        else
        {
            value = true;
        }

        return value;
    }

    async Task<bool> M_EdValidateForm()
    {
        bool value = true;
        if (string.IsNullOrEmpty(model.TheoryExamName) || string.IsNullOrEmpty(model.TheoryExamMaxMarks)
            || string.IsNullOrEmpty(model.TheoryExamObtMarks))
        {
            await ToastObjRegistration.Show(new ToastModel
            {
                Title = "Error!",
                Content = "Please fill theory marks details in qualifying exam section or if you have already filled all details please check again qualifying exam section!",
                CssClass = "e-toast-danger",
                Icon = "e-error toast-icons"
            });
            value = false;
        }
        else
        {
            if (string.IsNullOrEmpty(model.PracticalExamName) || string.IsNullOrEmpty(model.PracticalExamMaxMarks)
                || string.IsNullOrEmpty(model.PracticalExamObtMarks))
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "Please fill practical marks details in qualifying exam section or if you have already filled all details please check again qualifying exam section!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
                value = false;
            }
            else
            {
                if (string.IsNullOrEmpty(model.M_EdExamUniversity) || string.IsNullOrEmpty(model.M_EdExamPassingYear)
                    || string.IsNullOrEmpty(model.M_EdTotalPercentage))
                {
                    await ToastObjRegistration.Show(new ToastModel
                    {
                        Title = "Error!",
                        Content = "Please fill university and passing years details in qualifying exam section or if you have already filled all details please check again qualifying exam section!",
                        CssClass = "e-toast-danger",
                        Icon = "e-error toast-icons"
                    });
                    value = false;
                }
                else
                {
                    value = true;
                }
            }
        }

        return value;
    }

    async Task IsDomicileOfUK(string value)
    {
        if (value == "Yes")
        {
            CategoryList = CastCategoryWithoutUG();
            model.Category = "Schedule Cast (SC)";
            await BindState();
            model.StateName = "Uttarakhand";
            IsStateEnabled = true;
        }
        else
        {
            CategoryList = CastCategoryWithUG();
            model.Category = "Unreserved General";
            await BindState();
            IsStateEnabled = false;
        }
    }

    async Task CheckTheoryMarksValidation(string ObtMarks)
    {
        if (model.TheoryExamMaxMarks != "0" && ObtMarks != "0")
        {
            if (!string.IsNullOrEmpty(model.TheoryExamMaxMarks) && !string.IsNullOrEmpty(ObtMarks))
            {
                if (int.Parse(ObtMarks) > int.Parse(model.TheoryExamMaxMarks))
                {
                    await ToastObjRegistration.Show(new ToastModel
                    {
                        Title = "Error!",
                        Content = "Obtained marks should be less than maximum marks in theory exam options!",
                        CssClass = "e-toast-danger",
                        Icon = "e-error toast-icons"
                    });
                    await ProtectedSessionStorage.SetAsync("MarksInvalid", false);
                }
                else
                {
                    await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
                }
            }
        }
        else
        {
            await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
        }
    }

    async Task CheckPracticalMarksValidation(string ObtMarks)
    {
        if (model.PracticalExamMaxMarks != "0" && ObtMarks != "0")
        {
            if (!string.IsNullOrEmpty(model.PracticalExamMaxMarks) && !string.IsNullOrEmpty(ObtMarks))
            {
                if (int.Parse(ObtMarks) > int.Parse(model.PracticalExamMaxMarks))
                {
                    await ToastObjRegistration.Show(new ToastModel
                    {
                        Title = "Error!",
                        Content = "Obtained marks should be less than maximum marks in practical exam options!",
                        CssClass = "e-toast-danger",
                        Icon = "e-error toast-icons"
                    });
                    await ProtectedSessionStorage.SetAsync("MarksInvalid", false);
                }
                else
                {
                    await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
                }
            }
        }
        else
        {
            await ProtectedSessionStorage.SetAsync("MarksInvalid", true);
        }
    }

    void CheckEwsCondition(string value)
    {
        if (value != "Unreserved General")
        {
            IsEwsHideShow = false;
            model.IsEconomicallyWeakerSection = "";
            model.Category = "Schedule Cast (SC)";
        }
        else
        {
            IsEwsHideShow = true;
            model.IsEconomicallyWeakerSection = "";
            model.Category = "Unreserved General";
        }
    }

    async Task CheckDob(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            var dob = Convert.ToDateTime(value);
            var years = CenterService.CalculateYourAge(dob);
            if (years < 20)
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "Please enter correct date of birth!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
            }
        }
    }

    async Task UpdateRecordAsync()
    {
        UpdateLoader = "inline";
        try
        {
            bool IsKuYesNo = true;
            if (HeadingText == "B.Ed")
            {
                if (model.IsAppearing)
                {
                    if (string.IsNullOrEmpty(model.IsKumaunUniversity))
                        IsKuYesNo = false;
                    else
                        IsKuYesNo = true;
                }
            }
            else
            {
                if (string.IsNullOrEmpty(model.IsKumaunUniversity))
                    IsKuYesNo = false;
                else
                    IsKuYesNo = true;
            }
            if (IsKuYesNo)
            {
                var criminal_debarred = await ProtectedSessionStorage.GetAsync<bool>("criminal_debarred");
                if (criminal_debarred)
                {
                    var IsValidInKuTerms = await ProtectedSessionStorage.GetAsync<bool>("IsValidInKuTerms");
                    var changeEventValue = await ProtectedSessionStorage.GetAsync<bool>("gradu");
                    if (changeEventValue && IsValidInKuTerms)
                    {
                        var IsMarksValid = await ProtectedSessionStorage.GetAsync<bool>("MarksInvalid");
                        if (IsMarksValid)
                        {
                            var checkEligibility = await MarksEligibilityCheckAgainAsync();
                            if (checkEligibility)
                            {
                                bool photoFlag = false;
                                bool signatureFlag = false;
                                try
                                {
                                    string UniqueSignatureName = string.Empty;
                                    string UniquePhotoName = string.Empty;
                                    if (!string.IsNullOrEmpty(TempPhotoPath))
                                    {
                                        UniquePhotoName = await ProtectedSessionStorage.GetAsync<string>("UniquePhotoName");
                                        CenterService.DeleteTempFiles(UniquePhotoName);
                                        photoFlag = true;
                                    }

                                    if (!string.IsNullOrEmpty(TempSIgnaturePath))
                                    {
                                        UniqueSignatureName = await ProtectedSessionStorage.GetAsync<string>("UniqueSignatureName");
                                        CenterService.DeleteTempFiles(UniqueSignatureName);
                                        signatureFlag = true;
                                    }
                                }
                                catch (Exception ex)
                                {
                                    UpdateLoader = "none";
                                    if (HeadingText == "B.Ed")
                                    {
                                        await ToastObjRegistration.Show(new ToastModel
                                        {
                                            Title = "Error!",
                                            Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                                        });
                                        NavigationManager.NavigateTo("RegistrationForm/B_Ed", true);
                                    }
                                    else
                                    {
                                        await ToastObjRegistration.Show(new ToastModel
                                        {
                                            Title = "Error!",
                                            Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                                        });
                                        NavigationManager.NavigateTo("RegistrationForm/M_Ed", true);
                                    }
                                }

                                var authState = await authenticationStateTask;
                                var user = await UserManager.GetUserAsync(authState.User);
                                bool checkFormValidation = true;
                                if (HeadingText == "B.Ed")
                                {
                                    checkFormValidation = await B_EdValidateForm();
                                }
                                else
                                {
                                    checkFormValidation = await M_EdValidateForm();
                                }

                                if (checkFormValidation)
                                {
                                    model.UserId = user.Id;
                                    var result = await CenterService.UpdateRegistrationDetailsAsync(model, photoFlag, signatureFlag);
                                    if (result == "success")
                                    {
                                        await ProtectedSessionStorage.DeleteAsync("UniqueSignatureName");
                                        await ProtectedSessionStorage.DeleteAsync("UniquePhotoName");
                                        await ToastObjRegistration.Show(new ToastModel
                                        {
                                            Title = "Success!",
                                            Content = "Your details have been updated successfully.",
                                            CssClass = "e-toast-success",
                                            Icon = "e-success toast-icons"
                                        });
                                        UpdateLoader = "none";
                                        await ProtectedSessionStorage.SetAsync("gradu", true);
                                        TempPhotoPath = string.Empty;
                                        TempSIgnaturePath = string.Empty;
                                    }
                                    else if (result == "failure")
                                    {
                                        UpdateLoader = "none";
                                        await ToastObjRegistration.Show(new ToastModel
                                        {
                                            Title = "Error!",
                                            Content = "You are sending bad request, please try again later!",
                                            CssClass = "e-toast-danger",
                                            Icon = "e-error toast-icons"
                                        });
                                        await Js.CloseModel("modalConfirmDelete");
                                    }
                                    else
                                    {
                                        UpdateLoader = "none";
                                        await ToastObjRegistration.Show(new ToastModel
                                        {
                                            Title = "Error!",
                                            Content = result,
                                            CssClass = "e-toast-danger",
                                            Icon = "e-error toast-icons"
                                        });
                                        await Js.CloseModel("modalConfirmDelete");
                                    }
                                }
                                else
                                {
                                    UpdateLoader = "none";
                                }
                            }
                            else
                            {
                                UpdateLoader = "none";
                            }
                        }
                        else
                        {
                            UpdateLoader = "none";
                            await ToastObjRegistration.Show(new ToastModel
                            {
                                Title = "Error!",
                                Content = "Please enter the correct marks!",
                                CssClass = "e-toast-danger",
                                Icon = "e-error toast-icons"
                            });
                        }
                    }
                    else
                    {
                        UpdateLoader = "none";
                        await ToastObjRegistration.Show(new ToastModel
                        {
                            Title = "Error!",
                            Content = "You are not eligible!",
                            CssClass = "e-toast-danger",
                            Icon = "e-error toast-icons"
                        });
                        await Js.CloseModel("modalConfirmDelete");
                    }
                }
                else
                {
                    UpdateLoader = "none";
                }
            }
            else
            {
                UpdateLoader = "none";
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = "Please select Kumaun University option which is near by Is Appear Option!",
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons"
                });
                await Js.CloseModel("modalConfirmDelete");
            }
        }
        catch (Exception ex)
        {
            UpdateLoader = "none";
            if (HeadingText == "B.Ed")
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                });
                NavigationManager.NavigateTo("RegistrationForm/B_Ed", true);
            }
            else
            {
                await ToastObjRegistration.Show(new ToastModel
                {
                    Title = "Error!",
                    Content = ex.Message, CssClass = "e-toast-danger", Icon = "e-error toast-icons"
                });
                NavigationManager.NavigateTo("RegistrationForm/M_Ed", true);
            }
            await Js.CloseModel("modalConfirmDelete");
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPaymentService paymentService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DapperService dapperService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CaptchaService captchaService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment hostingEnvironment { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient httpClient { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedSessionStorage ProtectedSessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime Js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SignInManager<ApplicationUser> SignInManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> UserManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICenterService CenterService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserService UserService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
